import React from "react";
//import renderer from "react-test-renderer";
import { render } from "enzyme";
import { ComponentTest } from "../src/ComponentTest";
import { RemoteComponent } from "../src/RemoteComponent";
import "regenerator-runtime/runtime";
import Enzyme from "enzyme";
import EnzymeAdapter from "enzyme-adapter-react-16";

Enzyme.configure({
  adapter: new EnzymeAdapter(),
});

//import { RemoteComponent } from "../src/RemoteComponent";

//REACT_APP_REMOTE_URL="https://s3.amazonaws.com/remote-components.dev.prifina.com/starter/main.bundle.js"
//REACT_APP_REMOTE_URL="https://www.prifina.com"

test("Remote component renders correctly", async () => {
  //expect.assertions(1);
  /*
  const HelloWorld = (props) => (
    <RemoteComponent
      url={process.env.REACT_APP_REMOTE_URL}
      render={({ err, Component }) =>
        err ? <div>{err.toString()}</div> : <Component {...props} />
      }
    />
  );
  console.log("HELLO ", HelloWorld);
  const tree = renderer.create(<HelloWorld />).toJSON();
  console.log("APP ", tree);
  */
  //const consoleOutput = jest.spyOn(console, "log");
  //const remote = <ComponentTest url={process.env.REACT_APP_REMOTE_URL} />;
  const expected = "Loading...";
  const fallback = <div>{expected}</div>;
  /*
  const actual = render(
    <ComponentTest url={process.env.REACT_APP_REMOTE_URL} fallback={fallback} />
  );
*/
  //const useStateOutput = jest.spyOn(React, "useState");
  //const useEffectOutput = jest.spyOn(React, "useEffect");
  const remoteRender = ({ err, Component }) => {
    if (err) {
      console.log("ERR ", err);
      return <div>{err.toString()}</div>;
    } else {
      console.log("COMP ", Component);
      return <Component {...props} />;
    }
  };
  const actual = render(
    <RemoteComponent
      url={process.env.REACT_APP_REMOTE_URL}
      render={remoteRender}
    />
  );
  console.log("RENDER ", actual);
  //console.log("USE STATE ", useStateOutput.mock.calls);
  //console.log("USE EFFECT ", useEffectOutput.mock.calls);

  /*
  render={({ err, Component }) =>
      err ? <div>{err.toString()}</div> : <Component {...props} />
    }
*/
  //console.log("TEST ", consoleOutput.mock);
  /*
  console.log("REMOTE COMPONENT ", remote);
  console.log(typeof remote.type);
  console.log(React.isValidElement(remote));
  */
  /*
  expect(
    typeof remote.type === "function" && React.isValidElement(remote)
  ).toBe(true);
  */
  //expect(tree).toMatchSnapshot();
});
